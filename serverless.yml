service: serverless-typescript-jest-boilerplate
frameworkVersion: "3"

plugins:
  - serverless-plugin-typescript
  - serverless-domain-manager

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: ${env:REGION}
  deploymentBucket:
    name: deployment-bucket-${env:REGION}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:*"
          Resource: "arn:aws:s3:::S3_BUCKET"
        - Effect: "Allow"
          Action:
            - "s3:*"
          Resource: "arn:aws:s3:::S3_BUCKET/"
        - Effect: "Allow"
          Action:
            - "s3:*"
          Resource: "arn:aws:s3:::S3_BUCKET/*"
  environment:
    S3_BUCKET: ${env:S3_BUCKET}

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  patterns:
    - "!**.d.ts"
    - "!**/dist-es/**"
    # exclude:
    #   - node_modules/**
    #   - coverage/**
    #   - .idea
    #   - .gitignore
    #   - src/**
    #   - test/**
    #   - dist/**.map
    #   - tsconfig.json
    #   - package.json
    #   - package-lock.json

functions:
  hello:
    handler: src/handler.hello
    events:
      - httpApi:
          path: /hello
          method: get

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

custom:
  customDomain:
    domainName: ${opt:stage, self:provider.stage}-SET_DOMAIN
    stage: ${opt:stage, self:provider.stage}
    basePath: ""
    certificateName: "*.SET_DOMAIN"
    createRoute53Record: false
    createRoute53IPv6Record: false
    endpointType: REGIONAL
    securityPolicy: tls_1_2
    apiType: http
    autoDomain: true
